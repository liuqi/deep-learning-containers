ARG PYTHON=python3
ARG PYTHON_VERSION=3.8.13

# PyTorch Binaries
ARG PT_INFERENCE_URL=https://download.pytorch.org/whl/cpu/torch-1.11.0%2Bcpu-cp38-cp38-linux_x86_64.whl

ARG PT_TORCHVISION_URL=https://download.pytorch.org/whl/cpu/torchvision-0.12.0%2Bcpu-cp38-cp38-linux_x86_64.whl

ARG PT_TORCHAUDIO_URL=https://download.pytorch.org/whl/cpu/torchaudio-0.11.0%2Bcpu-cp38-cp38-linux_x86_64.whl


FROM ubuntu:20.04

LABEL maintainer="VMware AI"
LABEL dlc_major_version="1"

ARG PYTHON
ARG PYTHON_VERSION
ARG OPEN_MPI_VERSION=4.0.1

# PyTorch Binaries
ARG PT_INFERENCE_URL
ARG PT_TORCHVISION_URL
ARG PT_TORCHAUDIO_URL

ARG TS_VERSION=0.5.3

ENV LANG=C.UTF-8
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/conda/lib"
ENV PATH=/opt/conda/bin:$PATH
ENV TEMP=/home/model-server/tmp
# Set MKL_THREADING_LAYER=GNU to prevent issues between torch and numpy/mkl
ENV MKL_THREADING_LAYER=GNU
ENV DLC_CONTAINER_TYPE=inference
ENV MODEL_NAME=model
ENV MODEL_PATH=/opt/ml/model/

RUN apt-get update \
# TODO: Remove systemd upgrade once it is updated in base image
 && apt-get -y upgrade --only-upgrade systemd \
 && apt-get install -y --no-install-recommends software-properties-common \
 && add-apt-repository ppa:openjdk-r/ppa \
 && apt-get update \
 && apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    cmake \
    curl \
    emacs \
    git \
    jq \
    libcurl4-openssl-dev \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libssl-dev \
    libxext6 \
    libxrender-dev \
    openjdk-11-jdk \
    openssl \
    unzip \
    vim \
    wget \
    zlib1g-dev \
 && rm -rf /var/lib/apt/lists/* \
 && apt-get clean

# https://github.com/docker-library/openjdk/issues/261 https://github.com/docker-library/openjdk/pull/263/files
RUN keytool -importkeystore -srckeystore /etc/ssl/certs/java/cacerts -destkeystore /etc/ssl/certs/java/cacerts.jks -deststoretype JKS -srcstorepass changeit -deststorepass changeit -noprompt; \
    mv /etc/ssl/certs/java/cacerts.jks /etc/ssl/certs/java/cacerts; \
    /var/lib/dpkg/info/ca-certificates-java.postinst configure;

RUN wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-$OPEN_MPI_VERSION.tar.gz \
 && gunzip -c openmpi-$OPEN_MPI_VERSION.tar.gz | tar xf - \
 && cd openmpi-$OPEN_MPI_VERSION \
 && ./configure --prefix=/home/.openmpi \
 && make all install \
 && cd .. \
 && rm openmpi-$OPEN_MPI_VERSION.tar.gz \
 && rm -rf openmpi-$OPEN_MPI_VERSION

# The ENV variables declared below are changed in the previous section
# Grouping these ENV variables in the first section causes
# ompi_info to fail. This is only observed in CPU containers
ENV PATH="$PATH:/home/.openmpi/bin"
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/home/.openmpi/lib/"
RUN ompi_info --parsable --all | grep mpi_built_with_cuda_support:value

RUN curl -L -o ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
 && chmod +x ~/miniconda.sh \
 && ~/miniconda.sh -b -p /opt/conda \
 && rm ~/miniconda.sh \
 && /opt/conda/bin/conda update conda \
 && /opt/conda/bin/conda install -c conda-forge \
    python=$PYTHON_VERSION \
 && /opt/conda/bin/conda install -y \
    # conda 4.10.0 requires ruamel_yaml to be installed. Currently pinned at latest.
    ruamel_yaml==0.15.100 \
    cython \
    ipython \
    mkl-include \
    mkl \
    parso \
    scipy \
    typing \
    requests \
    h5py \
 && /opt/conda/bin/conda clean -ya

# Conda installs links for libtinfo.so.6 and libtinfo.so.6.2 both
# Which causes "/opt/conda/lib/libtinfo.so.6: no version information available" warning
# Removing link for libtinfo.so.6. This change is needed only for ubuntu 20.04-conda, and can be reverted
# once conda fixes the issue: https://github.com/conda/conda/issues/9680
RUN rm -rf /opt/conda/lib/libtinfo.so.6

# Install AWS-PyTorch, and other torch packages
RUN pip install --upgrade pip --trusted-host pypi.org --trusted-host files.pythonhosted.org \
 && ln -s /opt/conda/bin/pip /usr/local/bin/pip3 \
 && pip install --no-cache-dir -U \
    notebook \
    jupyter \
    matplotlib \
    boto3 \
    "cryptography>3.2" \
    enum-compat==0.0.3 \
    ipython==8.1.0 \
    numpy==1.22.2 \
    opencv-python==4.5.5.62 \
    packaging \
    "Pillow>=9.0.0" \
    "pyyaml>=5.4,<5.5" \
    scipy \
 && pip uninstall -y torch torchvision torchaudio torchdata \
 && pip install --no-cache-dir -U ${PT_INFERENCE_URL} ${PT_TORCHVISION_URL} ${PT_TORCHAUDIO_URL}

# TODO: revert torchserve-nightly back to torchserve once a compatible stable version is released
RUN pip uninstall -y model-archiver multi-model-server \
 && pip install captum \
#  && pip install torchserve==${TS_VERSION} \
 && pip install torchserve-nightly==2022.3.23.post2 \
 && pip install torch-model-archiver==${TS_VERSION}

RUN useradd -m model-server \
 && mkdir -p /home/model-server/tmp /opt/ml/model \
 && chown -R model-server /home/model-server /opt/ml/model

# COPY torchserve-e3-entrypoint.py /usr/local/bin/dockerd-entrypoint.py
# COPY config.properties /home/model-server
# try to write these 2 files manully
RUN echo "from __future__ import absolute_import" >> /usr/local/bin/dockerd-entrypoint.py\
 && echo "import shlex">> /usr/local/bin/dockerd-entrypoint.py\
 && echo "import subprocess">> /usr/local/bin/dockerd-entrypoint.py\
 && echo "import sys">> /usr/local/bin/dockerd-entrypoint.py\
 && echo "subprocess.check_call(shlex.split(' '.join(sys.argv[1:])))">> /usr/local/bin/dockerd-entrypoint.py\
 && echo "subprocess.call(['tail', '-f', '/dev/null'])">> /usr/local/bin/dockerd-entrypoint.py

RUN echo 'vmargs=-XX:+UseContainerSupport -XX:InitialRAMPercentage=8.0 -XX:MaxRAMPercentage=10.0 -XX:-UseLargePages -XX:+UseG1GC -XX:+ExitOnOutOfMemoryError'\
 >>/home/model-server/config.properties\
 && echo 'model_store=/opt/ml/model' >>/home/model-server/config.properties\
 && echo 'load_models=ALL'>>/home/model-server/config.properties\
 && echo 'inference_address=http://0.0.0.0:8080'>>/home/model-server/config.properties\
 && echo 'management_address=http://0.0.0.0:8081'>>/home/model-server/config.properties

RUN chmod +x /usr/local/bin/dockerd-entrypoint.py

EXPOSE 8080 8081
ENTRYPOINT ["python", "/usr/local/bin/dockerd-entrypoint.py"]

# jupyter notebook port
EXPOSE 8888

CMD ["sh","-c", "jupyter notebook --notebook-dir=/ --ip=0.0.0.0 --no-browser --allow-root --port=8888 --NotebookApp.token='' --NotebookApp.password='' --NotebookApp.allow_origin='*' --NotebookApp.base_url=/"]
# CMD ["torchserve", "--start", "--ts-config", "/home/model-server/config.properties", "--model-store", "/home/model-server/"]
# CMD ["/bin/bash"]