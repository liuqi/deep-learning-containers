FROM nvidia/cuda:11.2.2-cudnn8-runtime-ubuntu20.04

LABEL maintainer="VMware AI"
LABEL dlc_major_version="1"

ARG PYTHON_VERSION=3.8.10
ARG MX_URL=https://opentuna.cn/pypi/web/packages/e4/07/d9a40f4a6347d80cea2ef32c3a2f2a40f150592ca132d2986ce835ecfe7d/mxnet_cu112-1.9.0-py3-none-manylinux2014_x86_64.whl

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib" \
    PYTHONIOENCODING=UTF-8 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    DGLBACKEND=mxnet \
    NCCL_VERSION=2.8.3-1+cuda11.2 \
    DEBIAN_FRONTEND=noninteractive \
    NVIDIA_REQUIRE_CUDA="cuda>=11.2 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441 driver>=450"

RUN apt-get update \
 && apt-get -y upgrade --only-upgrade systemd \
 && apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    curl \
    emacs \
    git \
    vim \
    wget \
    unzip \
    libopencv-dev \
    openssh-client \
    openssh-server \
    zlib1g-dev \
    libreadline-gplv2-dev \
    libncursesw5-dev \
    libssl-dev \
    libsqlite3-dev \
    libgdbm-dev \
    libc6-dev \
    libbz2-dev \
    tk-dev \
    libffi-dev \
    cmake \
    libgtk2.0-dev \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

# from sources.list.d/nvidia-ml.list which was recently deprecated.
# https://forums.developer.nvidia.com/t/notice-cuda-linux-repository-key-rotation/212771/10
# For now, we will manually pull and install packages.
RUN wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu2004/x86_64/libnccl2_${NCCL_VERSION}_amd64.deb \
&& dpkg -i libnccl2_${NCCL_VERSION}_amd64.deb \
&& wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu2004/x86_64/libnccl-dev_${NCCL_VERSION}_amd64.deb \
&& dpkg -i libnccl-dev_${NCCL_VERSION}_amd64.deb \
&& rm libnccl2_${NCCL_VERSION}_amd64.deb libnccl-dev_${NCCL_VERSION}_amd64.deb

# install Python
RUN apt-get update \
 && apt-get install -y python3 python3-pip \
 && rm -rf /usr/bin/python /usr/bin/pip \
 && ln -s /usr/bin/python3 /usr/bin/python \
 && ln -s /usr/bin/pip3 /usr/bin/pip

# Install Open MPI
RUN mkdir /tmp/openmpi \
 && cd /tmp/openmpi \
 && wget -q https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz \
 && tar zxf openmpi-4.0.1.tar.gz \
 && cd openmpi-4.0.1 \
 && ./configure --enable-orterun-prefix-by-default \
 && make -j $(nproc) all \
 && make install \
 && ldconfig \
 && rm -rf /tmp/openmpi

# Create a wrapper for OpenMPI to allow running as root by default
RUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \
 && echo '#!/bin/bash' > /usr/local/bin/mpirun \
 && echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/local/bin/mpirun \
 && chmod a+x /usr/local/bin/mpirun

# Configure OpenMPI to run good defaults:
#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0
RUN echo "hwloc_base_binding_policy = none" >> /usr/local/etc/openmpi-mca-params.conf \
 && echo "rmaps_base_mapping_policy = slot" >> /usr/local/etc/openmpi-mca-params.conf

# Set default NCCL parameters
RUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf

ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
ENV PATH=/usr/local/bin:/usr/local/nvidia/bin:$PATH

WORKDIR /

RUN pip install --upgrade pip --trusted-host pypi.org --trusted-host files.pythonhosted.org \
 && pip install --no-cache --upgrade \
    # Protobuf above this version appears to result in horovod build failures.
    protobuf==3.20.1 \
    h5py==2.10.0 \
    onnx==1.8.1 \
    "numpy<1.20" \
    pandas==1.3.0 \
    "Pillow>=9.0,<10.0" \
    "requests<3" \
    scikit-learn \
    # disabling DGL until a release is built for MXNet 1.9 and CUDA 11.2
    # dgl-cu112 \
    scipy==1.7.0 \
    gluonnlp==0.10.0 \
    gluoncv==0.8.0 \
    # Putting a cap in versions number to avoid potential issues with a new major version
    "urllib3<2" \
    # python-dateutil==2.8.0 to satisfy botocore associated with latest awscli
    python-dateutil==2.8.0 \
    tqdm==4.39.0 \
    # install PyYAML>=5.4,<5.5 to avoid conflict with latest awscli
    "PyYAML>=5.4,<5.5" \
    mpi4py==3.0.3 \
    ${MX_URL} \
    s3fs==0.4.2 \
    opencv-python

# Allow OpenSSH to talk to containers without asking for confirmation
RUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \
 && echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new \
 && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config

# OpenSHH config for MPI communication
RUN mkdir -p /var/run/sshd && \
  sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

RUN rm -rf /root/.ssh/ && \
  mkdir -p /root/.ssh/ && \
  ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa && \
  cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \
  && printf "Host *\n StrictHostKeyChecking no\n" >> /root/.ssh/config

CMD ["/bin/bash"]